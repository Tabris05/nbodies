#version 460
#extension GL_EXT_mesh_shader : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require

#define LOCAL_GROUP_SIZE 32
#define BODIES_PER_INVOCATION 8
#define NUM_PRIMITIVES LOCAL_GROUP_SIZE * BODIES_PER_INVOCATION

struct Body {
	vec2 position;
	vec2 velocity;
    float mass;
}; 

layout(buffer_reference, scalar) buffer Bodies { 
	Body bodies[];
};

layout(push_constant, scalar) uniform constants {
    mat4 projMatrix;
	readonly Bodies inBodies;
    writeonly Bodies outBodies;
    float dt;
} pcs;

layout(local_size_x = LOCAL_GROUP_SIZE) in;
layout(points, max_vertices = NUM_PRIMITIVES, max_primitives = NUM_PRIMITIVES) out;

float pointSize(float mass) {
    return 9.5e-7f * mass + 4.9999905;   
}

void main() {
    SetMeshOutputsEXT(NUM_PRIMITIVES, NUM_PRIMITIVES);

    Body localBodies[BODIES_PER_INVOCATION];
    vec2 accelerations[BODIES_PER_INVOCATION];
    for(uint i = 0; i < BODIES_PER_INVOCATION; i++) {
        uint globalIndex = gl_GlobalInvocationID.x * BODIES_PER_INVOCATION + i;
        localBodies[i] = pcs.inBodies.bodies[globalIndex];

        accelerations[i] = vec2(0.0f);
    }

    for(uint i = 0; i < gl_NumWorkGroups.x * LOCAL_GROUP_SIZE; i++) {
        Body other = pcs.inBodies.bodies[i];

        for(uint j = 0; j < BODIES_PER_INVOCATION; j++) {
            vec2 direction = other.position - localBodies[j].position;
            float magnitude = length(direction);
            accelerations[j] += magnitude == 0.0f ? vec2(0.0f) : normalize(direction) / magnitude / magnitude * pcs.dt * other.mass;
        }
    }

    for(uint i = 0; i < BODIES_PER_INVOCATION; i++) {
        uint localIndex = gl_LocalInvocationID.x * BODIES_PER_INVOCATION + i;
        uint globalIndex = gl_GlobalInvocationID.x * BODIES_PER_INVOCATION + i;

        localBodies[i].velocity += accelerations[i] * pcs.dt;
        localBodies[i].position += localBodies[i].velocity * pcs.dt;

        pcs.outBodies.bodies[globalIndex] = localBodies[i];
        gl_MeshVerticesEXT[localIndex].gl_Position = pcs.projMatrix * vec4(localBodies[i].position, 0.0f, 1.0f);
        gl_MeshVerticesEXT[localIndex].gl_PointSize = pointSize(localBodies[i].mass);
        gl_PrimitivePointIndicesEXT[localIndex] = localIndex;
    }
}